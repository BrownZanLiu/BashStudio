#! /usr/bin/bash

###############################################################################
# Brown@copyright
# Version: 1.0
# Date: 20180614
# Description:
#     Used to create/update and install the cscope database of a special kind
# of source files under specified diretory.
###############################################################################

#Imports source /environments.sh
source /usr/local/zbash/bin/lib/environments.sh
source /usr/local/zbash/bin/lib/printer.sh

#### Definitions of global parameters ####
readonly ROOT_VIMRC_FILE="/root/.vimrc"
vDebug=false


#### Definitions of function ####
function usage () {
    print_bold_green "Usage: "
    print_bold_green "    update-csdb [-d|--src-dir <SourceTreeRootDir>]"
    print_bold_green "                [-D|--cscope-db-dir <CscopeDbDir>]"
    print_bold_green "                [-t|--src-type <c|b|p|j>]"
    print_bold_green "                [-h|--help]"
	print_bold_green "Note: "
	print_green "    -d|--src-dir <SourceTreeRootDir>, the root directory of source code tree"
	print_green "    -D|--cscope-db-dir <CscopeDbDir>, the directory of cscope DB"
	print_green "    -t|--src-type <c|b|p>, c for C/C++; b for bash; p for python; j for Java"
}

function cscope_section_insert() {
    echo >> ${ROOT_VIMRC_FILE}
    echo -e "if has(\"cscope\") && filereadable(\"/usr/bin/cscope\")" >> ${ROOT_VIMRC_FILE}
    echo -e "\tset csprg=/usr/bin/cscope" >> ${ROOT_VIMRC_FILE}
    echo -e "\tset csto=0" >> ${ROOT_VIMRC_FILE}
    echo -e "\tset cst" >> ${ROOT_VIMRC_FILE}
    echo -e "\tset nocsverb" >> ${ROOT_VIMRC_FILE}
    echo -e "\tif filereadable(\"$1\")" >> ${ROOT_VIMRC_FILE}
    echo -e "\t\t\" MUST NOT quoting database file." >> ${ROOT_VIMRC_FILE}
    echo -e "\t\tcs add $1" >> ${ROOT_VIMRC_FILE}
    echo -e "\tendif" >> ${ROOT_VIMRC_FILE}
    echo -e "\t${CsDbAppendMark}" >> ${ROOT_VIMRC_FILE}
    echo -e "\tset csverb\n" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev csa cs add" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev csf cs find" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev csk cs kill" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev csr cs reset" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev css cs show" >> ${ROOT_VIMRC_FILE}
    echo -e "\tcnoreabbrev csh cs help\n" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>g :cs find g <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>c :cs find c <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>t :cs find t <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>e :cs find e <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>f :cs find f <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>i :cs find i <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-\\>d :cs find d <C-R>=expand(\"<cword>\")<CR><CR>\n" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>s :scs find s <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>g :scs find g <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>c :scs find c <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>t :scs find t <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>e :scs find e <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>f :scs find f <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>i :scs find i <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@>d :scs find d <C-R>=expand(\"<cword>\")<CR><CR>\n" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>s :vert scs find s <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>g :vert scs find g <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>c :vert scs find c <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>t :vert scs find t <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>e :vert scs find e <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>f :vert scs find f <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>i :vert scs find i <C-R>=expand(\"<cfile>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-@><C-@>d :vert scs find d <C-R>=expand(\"<cword>\")<CR><CR>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-H> <C-W><C-H>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-L> <C-W><C-L>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-J> <C-W><C-J>" >> ${ROOT_VIMRC_FILE}
    echo -e "\tnmap <C-K> <C-W><C-K>" >> ${ROOT_VIMRC_FILE}
    echo -e "endif" >> ${ROOT_VIMRC_FILE}
}

function cscope_section_mark() {
    echo -n `cat ${ROOT_VIMRC_FILE} | grep 'cscope' | grep '/usr/bin/cscope'`
}

function cscope_section_csdb_mark() {
    echo -n `cat ${ROOT_VIMRC_FILE} | grep -E '\bcs[[:blank:]]+add[[:blank:]]+' | grep "$1"`
}

function cscope_section_csdb_insert() {
    if [[ -n $(cscope_section_csdb_mark $1) ]]; then
        echo "The given cscope database file already registered in ${ROOT_VIMRC_FILE}."
        exit 0
    fi
    local vTempRc=${ROOT_VIMRC_FILE}.tmp
	local vLine
    while IFS= read -r vLine; do
        if [[ ${vLine} =~ ${CsDbAppendMark} ]]; then
            echo -e "\tif filereadable(\"$1\")" >> ${vTempRc}
            echo -e "\t\t\" MUST NOT quoting database file." >> ${vTempRc}
            echo -e "\t\tcs add $1" >> ${vTempRc}
            echo -e "\tendif" >> ${vTempRc}
        fi
        echo "${vLine}" >> ${vTempRc}
    done < ${ROOT_VIMRC_FILE}

    rm -f ${ROOT_VIMRC_FILE}
    mv ${vTempRc} ${ROOT_VIMRC_FILE}
}

function update_csdb_main() {
	local vRc
	local vDebug=false

	local vCscopeHome=/usr/local/CscopeDb
	local vSrcRootDir
	local vSrcType
	for((i = 1; i <= $#; ++i)); do
		case ${!i} in
		'-d' | '--src-dir')
			i=$((i + 1))
			vSrcRootDir=${!i}
			;;
		'-D' | '--cscope-db-dir')
			i=$((i + 1))
			vCscopeHome=${!i}
			;;
		'-t' | '--src-type')
			i=$((i + 1))
			vSrcType=${!i}
			;;
		'-h' | '--help')
			usage
			exit ${EOK}
			;;
		*)
			usage
			exit ${EINVAL}
			;;
		esac
	done

	if ! [[ -d "${vSrcRootDir}" ]]; then
		print_red_t "Non-existed source code director: ${vSrcRootDir}"
		exit ${ENOENT}
	fi

	if [[ -n "$(whereis readlink)" ]]; then
		vSrcRootDir=$(readlink -f "${vSrcRootDir}")
	elif [[ -n "$(whereis readpath)" ]]; then
		vSrcRootDir=$(readpath -f "${vSrcRootDir}")
	elif ! [[ "${vSrcRootDir}" =~ ^/.* ]]; then
		print_red_t "Neither of readlink or readpath found."
		exit ${EPERM}
	fi
	if ! [[ ${vSrcType} =~ ^[c|b|p|j]$ ]]; then
		print_red_t "Unsported source file type: ${vSrcType}"
		exit ${EPROTOTYPE}
	fi
	local vTypeStr
	case ${vSrcType} in
	'c')
		vTypeStr=C++
		;;
	'b')
		vTypeStr=Bash
		;;
	'p')
		vTypeStr=Python
		;;
	'j')
		vTypeStr=Java
		;;
	esac
	if ! [[ -d ${vCscopeHome} ]]; then
		mkdir -p ${vCscopeHome}
		vRc=$?
		if [[ ${vRc} -ne 0 ]]; then
			print_red_t "[${vRc}]Failed to create cscope db root directory."
			exit ${EPERM}
		fi
	fi

	print_green_t "Try to generate cscope db of ${vTypeStr} files in ${vSrcRootDir}"


	#Usage check and argument handle
	local vBaseName=$(basename ${vSrcRootDir})
	vSrcFiles=${vBaseName}.csf
	if [[ -f ${vCscopeHome}/${vSrcFiles} ]]; then
		mv ${vCscopeHome}/${vSrcFiles} ${vCscopeHome}/${vSrcFiles}.bak
	fi
	case ${vSrcType} in
	'c')
		print_green_t "Try to create C/C++ source file list for updating cscope database"
		find ${vSrcRootDir} -regextype posix-extended -regex '.*\.(h|hpp|c|cc|cpp|cxx)' -type f  \
		> ${vCscopeHome}/${vSrcFiles}
		;;
	'b')
		print_green_t "Try to create bash source file list for updating cscope database"
		find ${vSrcRootDir} -name '*.sh' -type f > ${vCscopeHome}/${vSrcFiles}
		;;
	'p')
		print_green_t "Try to create Python source file list for updating cscope database"
		find ${vSrcRootDir} -name '*.py' -type f > ${vCscopeHome}/${vSrcFiles}
	    ;;
	'j')
		print_green_t "Try to create Python source file list for updating cscope database"
		find ${vSrcRootDir} -name '*.java' -type f > ${vCscopeHome}/${vSrcFiles}
	    ;;
	'm')
		print_green_t "Try to create make source file list for updating cscope database"
		find ${vSrcRootDir} -regextype posix-extended -regex 'GNUmakefile|makefile|Makefile' -type f \
		> ${vCscopeHome}/${vSrcFiles}
	    ;;
	*)
		usage;;
	esac
	if [[ -f ${vCscopeHome}/${vSrcFiles} ]]; then
		if [[ -f ${vCscopeHome}/${vSrcFiles}.bak ]]; then
			rm -f ${vCscopeHome}/${vSrcFiles}.bak
		fi
		ls -lh ${vCscopeHome}/${vSrcFiles}
	else
		print_red_t "Failed to create/update a source file list for cscope:	${vCscopeHome}/${vSrcFiles}"
		exit ${EPERM}
	fi

	#Generate cscope database file.
	print_green_t "Try to generate/update cscope database file."
	cd ${vCscopeHome}
	if [[ -f cscope.out || -f cscope.in.out || -f cscope.po.out ]]; then
		rm -f cscope*.out
	fi
	if [[ -f ${vCscopeHome}/${vBaseName}.cscope.out ]]; then
		mv ${vCscopeHome}/${vBaseName}.cscope.out ${vCscopeHome}/${vBaseName}.cscope.out.bak
	fi
	if [[ -f ${vCscopeHome}/${vBaseName}.cscope.in.out ]]; then
		mv ${vCscopeHome}/${vBaseName}.cscope.in.out ${vCscopeHome}/${vBaseName}.cscope.in.out.bak
	fi
	if [[ -f ${vCscopeHome}/${vBaseName}.cscope.po.out ]]; then
		mv ${vCscopeHome}/${vBaseName}.cscope.po.out ${vCscopeHome}/${vBaseName}.cscope.po.out.bak
	fi
	cscope -bqk -i ${vCscopeHome}/${vSrcFiles}
	if [[ -f cscope.out && -f cscope.in.out && -f cscope.po.out ]]; then
		mv cscope.out ${vCscopeHome}/${vBaseName}.cscope.out
		mv cscope.in.out ${vCscopeHome}/${vBaseName}.cscope.in.out
		mv cscope.po.out ${vCscopeHome}/${vBaseName}.cscope.po.out
		if [[ -f ${vCscopeHome}/${vBaseName}.cscope.out &&
			  -f ${vCscopeHome}/${vBaseName}.cscope.in.out &&
			  -f ${vCscopeHome}/${vBaseName}.cscope.po.out ]]; then
			rm -f ${vCscopeHome}/${vBaseName}.cscope.out.bak
			rm -f ${vCscopeHome}/${vBaseName}.cscope.in.out.bak
			rm -f ${vCscopeHome}/${vBaseName}.cscope.po.out.bak
			ls -lh ${vCscopeHome}/${vBaseName}.cscope*.out
		fi
		if [[ -f ${vCscopeHome}/${vBaseName}.cscope.out.bak ]]; then
			rm -f ${vCscopeHome}/${vBaseName}.cscopei*.out
			mv ${vCscopeHome}/${vBaseName}.cscope.out.bak ${vCscopeHome}/${vBaseName}.cscope.out
			mv ${vCscopeHome}/${vBaseName}.cscope.in.out.bak ${vCscopeHome}/${vBaseName}.cscope.in.out
			mv ${vCscopeHome}/${vBaseName}.cscope.po.out.bak ${vCscopeHome}/${vBaseName}.cscope.po.out
			echo -e "Failed to generate/udpate cscope database file.\n"
			exit 1
		fi
	else
		if [[ -f ${vCscopeHome}/${vBaseName}.cscope.out.bak ]]; then
			mv ${vCscopeHome}/${vBaseName}.cscope.out.bak ${vCscopeHome}/${vBaseName}.cscope.out
			mv ${vCscopeHome}/${vBaseName}.cscope.in.out.bak ${vCscopeHome}/${vBaseName}.cscope.in.out
			mv ${vCscopeHome}/${vBaseName}.cscope.po.out.bak ${vCscopeHome}/${vBaseName}.cscope.po.out
		fi
		print_red_t "Failed to generate/update cscope database file.\n"
		exit ${EPERM}
	fi
	cd - 2>&1 > /dev/null

    #Install this cscope database file.
	print_green_t "Try to install the cscope database file."
	${vDebug} && print_white "The local vimrc file is ${ROOT_VIMRC_FILE}"
	CsDbAppendMark='" Repeat above if clause for more database files.'

	${vDebug} && print_white "echo cscope_section_mark = $(cscope_section_mark)"
	if [[ -z $(cscope_section_mark) ]]; then
		print_green_t "Insert a new cscope section in ${ROOT_VIMRC_FILE}."
		cscope_section_insert "${vCscopeHome}/${vBaseName}.cscope.out"
	elif [[ -z $(cscope_section_csdb_mark "${vCscopeHome}/${vBaseName}.cscope.out") ]]; then
		print_green_t "Insert a new cscope database into cscope section in ${ROOT_VIMRC_FILE}."
		cscope_section_csdb_insert "${vCscopeHome}/${vBaseName}.cscope.out"
	else
		print_green_t "The target cscope database already registered in ${ROOT_VIMRC_FILE}."
	fi
}

update_csdb_main "$@"

